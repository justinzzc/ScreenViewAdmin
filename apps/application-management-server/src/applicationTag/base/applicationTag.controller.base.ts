/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplicationTagService } from "../applicationTag.service";
import { ApplicationTagCreateInput } from "./ApplicationTagCreateInput";
import { ApplicationTag } from "./ApplicationTag";
import { ApplicationTagFindManyArgs } from "./ApplicationTagFindManyArgs";
import { ApplicationTagWhereUniqueInput } from "./ApplicationTagWhereUniqueInput";
import { ApplicationTagUpdateInput } from "./ApplicationTagUpdateInput";

export class ApplicationTagControllerBase {
  constructor(protected readonly service: ApplicationTagService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplicationTag })
  async createApplicationTag(
    @common.Body() data: ApplicationTagCreateInput
  ): Promise<ApplicationTag> {
    return await this.service.createApplicationTag({
      data: {
        ...data,

        application: data.application
          ? {
              connect: data.application,
            }
          : undefined,
      },
      select: {
        application: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplicationTag] })
  @ApiNestedQuery(ApplicationTagFindManyArgs)
  async applicationTags(
    @common.Req() request: Request
  ): Promise<ApplicationTag[]> {
    const args = plainToClass(ApplicationTagFindManyArgs, request.query);
    return this.service.applicationTags({
      ...args,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplicationTag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async applicationTag(
    @common.Param() params: ApplicationTagWhereUniqueInput
  ): Promise<ApplicationTag | null> {
    const result = await this.service.applicationTag({
      where: params,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplicationTag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplicationTag(
    @common.Param() params: ApplicationTagWhereUniqueInput,
    @common.Body() data: ApplicationTagUpdateInput
  ): Promise<ApplicationTag | null> {
    try {
      return await this.service.updateApplicationTag({
        where: params,
        data: {
          ...data,

          application: data.application
            ? {
                connect: data.application,
              }
            : undefined,
        },
        select: {
          application: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplicationTag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplicationTag(
    @common.Param() params: ApplicationTagWhereUniqueInput
  ): Promise<ApplicationTag | null> {
    try {
      return await this.service.deleteApplicationTag({
        where: params,
        select: {
          application: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

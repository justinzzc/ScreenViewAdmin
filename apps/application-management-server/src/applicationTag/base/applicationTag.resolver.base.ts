/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ApplicationTag } from "./ApplicationTag";
import { ApplicationTagCountArgs } from "./ApplicationTagCountArgs";
import { ApplicationTagFindManyArgs } from "./ApplicationTagFindManyArgs";
import { ApplicationTagFindUniqueArgs } from "./ApplicationTagFindUniqueArgs";
import { CreateApplicationTagArgs } from "./CreateApplicationTagArgs";
import { UpdateApplicationTagArgs } from "./UpdateApplicationTagArgs";
import { DeleteApplicationTagArgs } from "./DeleteApplicationTagArgs";
import { Application } from "../../application/base/Application";
import { ApplicationTagService } from "../applicationTag.service";
@graphql.Resolver(() => ApplicationTag)
export class ApplicationTagResolverBase {
  constructor(protected readonly service: ApplicationTagService) {}

  async _applicationTagsMeta(
    @graphql.Args() args: ApplicationTagCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApplicationTag])
  async applicationTags(
    @graphql.Args() args: ApplicationTagFindManyArgs
  ): Promise<ApplicationTag[]> {
    return this.service.applicationTags(args);
  }

  @graphql.Query(() => ApplicationTag, { nullable: true })
  async applicationTag(
    @graphql.Args() args: ApplicationTagFindUniqueArgs
  ): Promise<ApplicationTag | null> {
    const result = await this.service.applicationTag(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApplicationTag)
  async createApplicationTag(
    @graphql.Args() args: CreateApplicationTagArgs
  ): Promise<ApplicationTag> {
    return await this.service.createApplicationTag({
      ...args,
      data: {
        ...args.data,

        application: args.data.application
          ? {
              connect: args.data.application,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ApplicationTag)
  async updateApplicationTag(
    @graphql.Args() args: UpdateApplicationTagArgs
  ): Promise<ApplicationTag | null> {
    try {
      return await this.service.updateApplicationTag({
        ...args,
        data: {
          ...args.data,

          application: args.data.application
            ? {
                connect: args.data.application,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationTag)
  async deleteApplicationTag(
    @graphql.Args() args: DeleteApplicationTagArgs
  ): Promise<ApplicationTag | null> {
    try {
      return await this.service.deleteApplicationTag(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async getApplication(
    @graphql.Parent() parent: ApplicationTag
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

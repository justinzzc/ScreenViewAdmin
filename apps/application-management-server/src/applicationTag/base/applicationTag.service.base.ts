/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ApplicationTag as PrismaApplicationTag,
  Application as PrismaApplication,
} from "@prisma/client";

export class ApplicationTagServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApplicationTagCountArgs, "select">
  ): Promise<number> {
    return this.prisma.applicationTag.count(args);
  }

  async applicationTags(
    args: Prisma.ApplicationTagFindManyArgs
  ): Promise<PrismaApplicationTag[]> {
    return this.prisma.applicationTag.findMany(args);
  }
  async applicationTag(
    args: Prisma.ApplicationTagFindUniqueArgs
  ): Promise<PrismaApplicationTag | null> {
    return this.prisma.applicationTag.findUnique(args);
  }
  async createApplicationTag(
    args: Prisma.ApplicationTagCreateArgs
  ): Promise<PrismaApplicationTag> {
    return this.prisma.applicationTag.create(args);
  }
  async updateApplicationTag(
    args: Prisma.ApplicationTagUpdateArgs
  ): Promise<PrismaApplicationTag> {
    return this.prisma.applicationTag.update(args);
  }
  async deleteApplicationTag(
    args: Prisma.ApplicationTagDeleteArgs
  ): Promise<PrismaApplicationTag> {
    return this.prisma.applicationTag.delete(args);
  }

  async getApplication(parentId: string): Promise<PrismaApplication | null> {
    return this.prisma.applicationTag
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}

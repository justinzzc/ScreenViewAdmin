/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ApplicationVersion } from "./ApplicationVersion";
import { ApplicationVersionCountArgs } from "./ApplicationVersionCountArgs";
import { ApplicationVersionFindManyArgs } from "./ApplicationVersionFindManyArgs";
import { ApplicationVersionFindUniqueArgs } from "./ApplicationVersionFindUniqueArgs";
import { CreateApplicationVersionArgs } from "./CreateApplicationVersionArgs";
import { UpdateApplicationVersionArgs } from "./UpdateApplicationVersionArgs";
import { DeleteApplicationVersionArgs } from "./DeleteApplicationVersionArgs";
import { PageVersionFindManyArgs } from "../../pageVersion/base/PageVersionFindManyArgs";
import { PageVersion } from "../../pageVersion/base/PageVersion";
import { Application } from "../../application/base/Application";
import { ApplicationVersionService } from "../applicationVersion.service";
@graphql.Resolver(() => ApplicationVersion)
export class ApplicationVersionResolverBase {
  constructor(protected readonly service: ApplicationVersionService) {}

  async _applicationVersionsMeta(
    @graphql.Args() args: ApplicationVersionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApplicationVersion])
  async applicationVersions(
    @graphql.Args() args: ApplicationVersionFindManyArgs
  ): Promise<ApplicationVersion[]> {
    return this.service.applicationVersions(args);
  }

  @graphql.Query(() => ApplicationVersion, { nullable: true })
  async applicationVersion(
    @graphql.Args() args: ApplicationVersionFindUniqueArgs
  ): Promise<ApplicationVersion | null> {
    const result = await this.service.applicationVersion(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApplicationVersion)
  async createApplicationVersion(
    @graphql.Args() args: CreateApplicationVersionArgs
  ): Promise<ApplicationVersion> {
    return await this.service.createApplicationVersion({
      ...args,
      data: {
        ...args.data,

        application: args.data.application
          ? {
              connect: args.data.application,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ApplicationVersion)
  async updateApplicationVersion(
    @graphql.Args() args: UpdateApplicationVersionArgs
  ): Promise<ApplicationVersion | null> {
    try {
      return await this.service.updateApplicationVersion({
        ...args,
        data: {
          ...args.data,

          application: args.data.application
            ? {
                connect: args.data.application,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationVersion)
  async deleteApplicationVersion(
    @graphql.Args() args: DeleteApplicationVersionArgs
  ): Promise<ApplicationVersion | null> {
    try {
      return await this.service.deleteApplicationVersion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PageVersion], { name: "pageVersions" })
  async findPageVersions(
    @graphql.Parent() parent: ApplicationVersion,
    @graphql.Args() args: PageVersionFindManyArgs
  ): Promise<PageVersion[]> {
    const results = await this.service.findPageVersions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  async getApplication(
    @graphql.Parent() parent: ApplicationVersion
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

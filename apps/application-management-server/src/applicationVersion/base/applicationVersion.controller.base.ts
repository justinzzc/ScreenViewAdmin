/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplicationVersionService } from "../applicationVersion.service";
import { ApplicationVersionCreateInput } from "./ApplicationVersionCreateInput";
import { ApplicationVersion } from "./ApplicationVersion";
import { ApplicationVersionFindManyArgs } from "./ApplicationVersionFindManyArgs";
import { ApplicationVersionWhereUniqueInput } from "./ApplicationVersionWhereUniqueInput";
import { ApplicationVersionUpdateInput } from "./ApplicationVersionUpdateInput";
import { PageVersionFindManyArgs } from "../../pageVersion/base/PageVersionFindManyArgs";
import { PageVersion } from "../../pageVersion/base/PageVersion";
import { PageVersionWhereUniqueInput } from "../../pageVersion/base/PageVersionWhereUniqueInput";

export class ApplicationVersionControllerBase {
  constructor(protected readonly service: ApplicationVersionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplicationVersion })
  async createApplicationVersion(
    @common.Body() data: ApplicationVersionCreateInput
  ): Promise<ApplicationVersion> {
    return await this.service.createApplicationVersion({
      data: {
        ...data,

        application: data.application
          ? {
              connect: data.application,
            }
          : undefined,
      },
      select: {
        application: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        releaseDate: true,
        updatedAt: true,
        versionDescription: true,
        versionName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplicationVersion] })
  @ApiNestedQuery(ApplicationVersionFindManyArgs)
  async applicationVersions(
    @common.Req() request: Request
  ): Promise<ApplicationVersion[]> {
    const args = plainToClass(ApplicationVersionFindManyArgs, request.query);
    return this.service.applicationVersions({
      ...args,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        releaseDate: true,
        updatedAt: true,
        versionDescription: true,
        versionName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplicationVersion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async applicationVersion(
    @common.Param() params: ApplicationVersionWhereUniqueInput
  ): Promise<ApplicationVersion | null> {
    const result = await this.service.applicationVersion({
      where: params,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        releaseDate: true,
        updatedAt: true,
        versionDescription: true,
        versionName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplicationVersion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplicationVersion(
    @common.Param() params: ApplicationVersionWhereUniqueInput,
    @common.Body() data: ApplicationVersionUpdateInput
  ): Promise<ApplicationVersion | null> {
    try {
      return await this.service.updateApplicationVersion({
        where: params,
        data: {
          ...data,

          application: data.application
            ? {
                connect: data.application,
              }
            : undefined,
        },
        select: {
          application: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          releaseDate: true,
          updatedAt: true,
          versionDescription: true,
          versionName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplicationVersion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplicationVersion(
    @common.Param() params: ApplicationVersionWhereUniqueInput
  ): Promise<ApplicationVersion | null> {
    try {
      return await this.service.deleteApplicationVersion({
        where: params,
        select: {
          application: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          releaseDate: true,
          updatedAt: true,
          versionDescription: true,
          versionName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/pageVersions")
  @ApiNestedQuery(PageVersionFindManyArgs)
  async findPageVersions(
    @common.Req() request: Request,
    @common.Param() params: ApplicationVersionWhereUniqueInput
  ): Promise<PageVersion[]> {
    const query = plainToClass(PageVersionFindManyArgs, request.query);
    const results = await this.service.findPageVersions(params.id, {
      ...query,
      select: {
        applicationVersion: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        page: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        versionSchema: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pageVersions")
  async connectPageVersions(
    @common.Param() params: ApplicationVersionWhereUniqueInput,
    @common.Body() body: PageVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pageVersions: {
        connect: body,
      },
    };
    await this.service.updateApplicationVersion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pageVersions")
  async updatePageVersions(
    @common.Param() params: ApplicationVersionWhereUniqueInput,
    @common.Body() body: PageVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pageVersions: {
        set: body,
      },
    };
    await this.service.updateApplicationVersion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pageVersions")
  async disconnectPageVersions(
    @common.Param() params: ApplicationVersionWhereUniqueInput,
    @common.Body() body: PageVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pageVersions: {
        disconnect: body,
      },
    };
    await this.service.updateApplicationVersion({
      where: params,
      data,
      select: { id: true },
    });
  }
}

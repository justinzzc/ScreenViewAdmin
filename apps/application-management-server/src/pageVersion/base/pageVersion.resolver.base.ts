/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PageVersion } from "./PageVersion";
import { PageVersionCountArgs } from "./PageVersionCountArgs";
import { PageVersionFindManyArgs } from "./PageVersionFindManyArgs";
import { PageVersionFindUniqueArgs } from "./PageVersionFindUniqueArgs";
import { CreatePageVersionArgs } from "./CreatePageVersionArgs";
import { UpdatePageVersionArgs } from "./UpdatePageVersionArgs";
import { DeletePageVersionArgs } from "./DeletePageVersionArgs";
import { ApplicationVersion } from "../../applicationVersion/base/ApplicationVersion";
import { Page } from "../../page/base/Page";
import { PageVersionService } from "../pageVersion.service";
@graphql.Resolver(() => PageVersion)
export class PageVersionResolverBase {
  constructor(protected readonly service: PageVersionService) {}

  async _pageVersionsMeta(
    @graphql.Args() args: PageVersionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PageVersion])
  async pageVersions(
    @graphql.Args() args: PageVersionFindManyArgs
  ): Promise<PageVersion[]> {
    return this.service.pageVersions(args);
  }

  @graphql.Query(() => PageVersion, { nullable: true })
  async pageVersion(
    @graphql.Args() args: PageVersionFindUniqueArgs
  ): Promise<PageVersion | null> {
    const result = await this.service.pageVersion(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PageVersion)
  async createPageVersion(
    @graphql.Args() args: CreatePageVersionArgs
  ): Promise<PageVersion> {
    return await this.service.createPageVersion({
      ...args,
      data: {
        ...args.data,

        applicationVersion: args.data.applicationVersion
          ? {
              connect: args.data.applicationVersion,
            }
          : undefined,

        page: args.data.page
          ? {
              connect: args.data.page,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PageVersion)
  async updatePageVersion(
    @graphql.Args() args: UpdatePageVersionArgs
  ): Promise<PageVersion | null> {
    try {
      return await this.service.updatePageVersion({
        ...args,
        data: {
          ...args.data,

          applicationVersion: args.data.applicationVersion
            ? {
                connect: args.data.applicationVersion,
              }
            : undefined,

          page: args.data.page
            ? {
                connect: args.data.page,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PageVersion)
  async deletePageVersion(
    @graphql.Args() args: DeletePageVersionArgs
  ): Promise<PageVersion | null> {
    try {
      return await this.service.deletePageVersion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ApplicationVersion, {
    nullable: true,
    name: "applicationVersion",
  })
  async getApplicationVersion(
    @graphql.Parent() parent: PageVersion
  ): Promise<ApplicationVersion | null> {
    const result = await this.service.getApplicationVersion(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Page, {
    nullable: true,
    name: "page",
  })
  async getPage(@graphql.Parent() parent: PageVersion): Promise<Page | null> {
    const result = await this.service.getPage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PageVersion as PrismaPageVersion,
  ApplicationVersion as PrismaApplicationVersion,
  Page as PrismaPage,
} from "@prisma/client";

export class PageVersionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PageVersionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pageVersion.count(args);
  }

  async pageVersions(
    args: Prisma.PageVersionFindManyArgs
  ): Promise<PrismaPageVersion[]> {
    return this.prisma.pageVersion.findMany(args);
  }
  async pageVersion(
    args: Prisma.PageVersionFindUniqueArgs
  ): Promise<PrismaPageVersion | null> {
    return this.prisma.pageVersion.findUnique(args);
  }
  async createPageVersion(
    args: Prisma.PageVersionCreateArgs
  ): Promise<PrismaPageVersion> {
    return this.prisma.pageVersion.create(args);
  }
  async updatePageVersion(
    args: Prisma.PageVersionUpdateArgs
  ): Promise<PrismaPageVersion> {
    return this.prisma.pageVersion.update(args);
  }
  async deletePageVersion(
    args: Prisma.PageVersionDeleteArgs
  ): Promise<PrismaPageVersion> {
    return this.prisma.pageVersion.delete(args);
  }

  async getApplicationVersion(
    parentId: string
  ): Promise<PrismaApplicationVersion | null> {
    return this.prisma.pageVersion
      .findUnique({
        where: { id: parentId },
      })
      .applicationVersion();
  }

  async getPage(parentId: string): Promise<PrismaPage | null> {
    return this.prisma.pageVersion
      .findUnique({
        where: { id: parentId },
      })
      .page();
  }
}

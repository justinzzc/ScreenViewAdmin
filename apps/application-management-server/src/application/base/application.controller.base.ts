/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplicationService } from "../application.service";
import { ApplicationCreateInput } from "./ApplicationCreateInput";
import { Application } from "./Application";
import { ApplicationFindManyArgs } from "./ApplicationFindManyArgs";
import { ApplicationWhereUniqueInput } from "./ApplicationWhereUniqueInput";
import { ApplicationUpdateInput } from "./ApplicationUpdateInput";
import { ApplicationTagFindManyArgs } from "../../applicationTag/base/ApplicationTagFindManyArgs";
import { ApplicationTag } from "../../applicationTag/base/ApplicationTag";
import { ApplicationTagWhereUniqueInput } from "../../applicationTag/base/ApplicationTagWhereUniqueInput";
import { ApplicationVersionFindManyArgs } from "../../applicationVersion/base/ApplicationVersionFindManyArgs";
import { ApplicationVersion } from "../../applicationVersion/base/ApplicationVersion";
import { ApplicationVersionWhereUniqueInput } from "../../applicationVersion/base/ApplicationVersionWhereUniqueInput";
import { PageFindManyArgs } from "../../page/base/PageFindManyArgs";
import { Page } from "../../page/base/Page";
import { PageWhereUniqueInput } from "../../page/base/PageWhereUniqueInput";

export class ApplicationControllerBase {
  constructor(protected readonly service: ApplicationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Application })
  async createApplication(
    @common.Body() data: ApplicationCreateInput
  ): Promise<Application> {
    return await this.service.createApplication({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        screenshot: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Application] })
  @ApiNestedQuery(ApplicationFindManyArgs)
  async applications(@common.Req() request: Request): Promise<Application[]> {
    const args = plainToClass(ApplicationFindManyArgs, request.query);
    return this.service.applications({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        screenshot: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Application })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async application(
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Application | null> {
    const result = await this.service.application({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        screenshot: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Application })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplication(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() data: ApplicationUpdateInput
  ): Promise<Application | null> {
    try {
      return await this.service.updateApplication({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          screenshot: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Application })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplication(
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Application | null> {
    try {
      return await this.service.deleteApplication({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          screenshot: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/applicationTags")
  @ApiNestedQuery(ApplicationTagFindManyArgs)
  async findApplicationTags(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<ApplicationTag[]> {
    const query = plainToClass(ApplicationTagFindManyArgs, request.query);
    const results = await this.service.findApplicationTags(params.id, {
      ...query,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applicationTags")
  async connectApplicationTags(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationTagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationTags: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applicationTags")
  async updateApplicationTags(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationTagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationTags: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applicationTags")
  async disconnectApplicationTags(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationTagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationTags: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/applicationVersions")
  @ApiNestedQuery(ApplicationVersionFindManyArgs)
  async findApplicationVersions(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<ApplicationVersion[]> {
    const query = plainToClass(ApplicationVersionFindManyArgs, request.query);
    const results = await this.service.findApplicationVersions(params.id, {
      ...query,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        releaseDate: true,
        updatedAt: true,
        versionDescription: true,
        versionName: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applicationVersions")
  async connectApplicationVersions(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationVersions: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applicationVersions")
  async updateApplicationVersions(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationVersions: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applicationVersions")
  async disconnectApplicationVersions(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: ApplicationVersionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationVersions: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/pages")
  @ApiNestedQuery(PageFindManyArgs)
  async findPages(
    @common.Req() request: Request,
    @common.Param() params: ApplicationWhereUniqueInput
  ): Promise<Page[]> {
    const query = plainToClass(PageFindManyArgs, request.query);
    const results = await this.service.findPages(params.id, {
      ...query,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        pageSchema: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pages")
  async connectPages(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pages: {
        connect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pages")
  async updatePages(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pages: {
        set: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pages")
  async disconnectPages(
    @common.Param() params: ApplicationWhereUniqueInput,
    @common.Body() body: PageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pages: {
        disconnect: body,
      },
    };
    await this.service.updateApplication({
      where: params,
      data,
      select: { id: true },
    });
  }
}
